openapi: 3.0.3
info:
  title: Example Customer API
  description: Sample API for testing OpenAPI spec upload functionality
  version: 1.0.0
  contact:
    name: API Support
    email: api@example.com

servers:
  - url: https://api.customer-example.com/v1
    description: Production server
  - url: https://staging-api.customer-example.com/v1
    description: Staging server

paths:
  /users:
    get:
      summary: List all users
      description: Retrieve a list of all users in the system
      operationId: listUsers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    
    post:
      summary: Create a new user
      description: Add a new user to the system
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      summary: Delete user
      description: Remove a user from the system
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully

  /entities:
    post:
      summary: Create entities
      description: Bulk create entities (similar to OAA push)
      operationId: createEntities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  example: "active_directory"
                entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/Entity'
      responses:
        '201':
          description: Entities created successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        department:
          type: string
          example: "Engineering"
        status:
          type: string
          enum: [active, inactive]
        created_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
        department:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        department:
          type: string
        status:
          type: string
          enum: [active, inactive]

    Entity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        attributes:
          type: object